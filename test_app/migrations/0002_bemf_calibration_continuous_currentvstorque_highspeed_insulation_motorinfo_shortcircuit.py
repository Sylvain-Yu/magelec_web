# Generated by Django 2.2.3 on 2019-08-29 09:03

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('login_app', '0002_auto_20190709_1348'),
        ('test_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='MotorInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motor_PN', models.CharField(max_length=32)),
                ('motor_model', models.CharField(max_length=32)),
                ('motor_code', models.CharField(max_length=32)),
                ('tester1', models.CharField(choices=[('Leon Chen', '陈晓文'), ('Tiegen Ji', '季铁根'), ('Sylvain Yu', '郁松林'), ('Jiliang Hong', '洪继良'), ('Charles Li', '李文昌'), ('Brant Miao', '苗强'), ('others', '其他')], max_length=32)),
                ('tester2', models.CharField(choices=[('Leon Chen', '陈晓文'), ('Tiegen Ji', '季铁根'), ('Sylvain Yu', '郁松林'), ('Jiliang Hong', '洪继良'), ('Charles Li', '李文昌'), ('Brant Miao', '苗强'), ('others', '其他')], max_length=32)),
                ('ambient_temperature', models.FloatField()),
                ('ambient_humidity', models.FloatField()),
                ('motor_poles', models.IntegerField()),
                ('resolver_poles', models.IntegerField()),
                ('inverter_type', models.CharField(choices=[('RMS PM250DZ', 'RMS PM250DZ'), ('RMS PM100', 'RMS PM100'), ('EMSISO EM500', 'EMSISO EM500'), ('EMSISO EM100', 'EMSISO EM100'), ('EMSISO EM200', 'EMSISO EM200'), ('unknown', '其他')], max_length=32)),
                ('inverter_serial', models.CharField(max_length=32)),
                ('phase_connection', models.CharField(choices=[('UVW to ABC', 'UVW to ABC'), ('UWV to ABC', 'UWV to ABC')], max_length=32)),
                ('motor_type_options_eeprom', models.IntegerField()),
                ('forward_direction', models.CharField(choices=[('clockwise', '顺时针'), ('anti-clockwise', '逆时针')], max_length=32)),
                ('comment', models.CharField(blank=True, max_length=128, null=True)),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('modify_time', models.DateTimeField(auto_now=True)),
                ('recorder', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='login_app.User')),
            ],
            options={
                'verbose_name': '电机信息',
                'verbose_name_plural': '电机信息',
                'ordering': ['-c_time'],
            },
        ),
        migrations.CreateModel(
            name='ShortCircuit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speed_point', models.IntegerField()),
                ('cooling_temperature', models.FloatField()),
                ('winding_temperature_min', models.FloatField()),
                ('winding_temperature_max', models.FloatField()),
                ('env_temperature', models.FloatField()),
                ('env_humidity', models.FloatField()),
                ('rotate_direction', models.CharField(choices=[('Positive', '正转'), ('Negitive', '反转')], max_length=32)),
                ('u_phase_current', models.FloatField()),
                ('v_phase_current', models.FloatField()),
                ('w_phase_current', models.FloatField()),
                ('average_phase_current', models.FloatField()),
                ('u_phase_f_current', models.FloatField()),
                ('v_phase_f_current', models.FloatField()),
                ('w_phase_f_current', models.FloatField()),
                ('average_phase_f_current', models.FloatField()),
                ('torque_measured', models.FloatField()),
                ('temperature_measured', models.FloatField()),
                ('comment', models.CharField(blank=True, max_length=128, null=True)),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('modify_time', models.DateTimeField(auto_now=True)),
                ('motorinfo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_app.MotorInfo')),
            ],
            options={
                'verbose_name': '短路试验',
                'verbose_name_plural': '短路试验',
                'ordering': ['-c_time'],
            },
        ),
        migrations.CreateModel(
            name='Insulation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resistance_15s', models.FloatField()),
                ('resistance_60s', models.FloatField()),
                ('temperature_measured', models.FloatField()),
                ('rtd1', models.FloatField()),
                ('rtd2', models.FloatField()),
                ('room_temperature', models.FloatField()),
                ('room_humidity', models.FloatField()),
                ('winding_phase_u_v', models.FloatField()),
                ('winding_phase_v_w', models.FloatField()),
                ('winding_phase_u_w', models.FloatField()),
                ('insulation_voltage', models.IntegerField()),
                ('insulation_resistance', models.FloatField()),
                ('hipot_voltage', models.IntegerField()),
                ('hipot_resistance', models.FloatField()),
                ('recorder', models.CharField(blank=True, max_length=32, null=True)),
                ('comment', models.CharField(blank=True, max_length=128, null=True)),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('modify_time', models.DateTimeField(auto_now=True)),
                ('motorinfo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_app.MotorInfo')),
            ],
            options={
                'verbose_name': '绝缘测试',
                'verbose_name_plural': '绝缘测试',
                'ordering': ['-c_time'],
            },
        ),
        migrations.CreateModel(
            name='HighSpeed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speed', models.IntegerField()),
                ('run_time', models.DurationField()),
                ('rotate_direction', models.CharField(choices=[('Positive', '正转'), ('Negitive', '反转')], max_length=32)),
                ('RTD1_start_temperature', models.FloatField()),
                ('RTD2_start_temperature', models.FloatField()),
                ('RTD1_end_temperature', models.FloatField()),
                ('RTD2_end_temperature', models.FloatField()),
                ('cooling_temperature', models.FloatField()),
                ('cooling_flow', models.FloatField()),
                ('passornot', models.BooleanField()),
                ('comment', models.CharField(blank=True, max_length=128, null=True)),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('modify_time', models.DateTimeField(auto_now=True)),
                ('motorinfo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_app.MotorInfo')),
            ],
            options={
                'verbose_name': '高转速试验',
                'verbose_name_plural': '高转速试验',
                'ordering': ['-c_time'],
            },
        ),
        migrations.CreateModel(
            name='CurrentVsTorque',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speed_point', models.IntegerField()),
                ('current_target', models.IntegerField(null=True)),
                ('rotate_direction', models.CharField(choices=[('Positive', '正转'), ('Negitive', '反转')], max_length=32)),
                ('control_mode', models.CharField(choices=[('Traction_Torque', '扭矩模式_主转'), ('Traction_Speed', '转速模式_主转'), ('Generation_Torque', '扭矩模式_跟转'), ('Generation_Speed', '转速模式_跟转')], max_length=32)),
                ('cooling_type', models.CharField(choices=[('Liquid cooling', '冷却液'), ('Air Cooling', '风冷')], max_length=32)),
                ('cooling_flow', models.FloatField()),
                ('cooling_temperature', models.FloatField()),
                ('winding_temperature_min', models.FloatField()),
                ('winding_temperature_max', models.FloatField()),
                ('dc_bus_voltage', models.IntegerField()),
                ('temperature_measured', models.FloatField(null=True)),
                ('phase_current_measured', models.FloatField(null=True)),
                ('torque_command', models.IntegerField(null=True)),
                ('torque_measured', models.IntegerField(null=True)),
                ('Kt', models.FloatField(null=True)),
                ('Ke', models.FloatField(null=True)),
                ('comment', models.CharField(blank=True, max_length=128, null=True)),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('modify_time', models.DateTimeField(auto_now=True)),
                ('motorinfo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_app.MotorInfo')),
            ],
            options={
                'verbose_name': '电特性试验',
                'verbose_name_plural': '电特性试验',
                'ordering': ['-c_time'],
            },
        ),
        migrations.CreateModel(
            name='Continuous',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('control_mode', models.CharField(choices=[('Traction_Torque', '扭矩模式_主转'), ('Traction_Speed', '转速模式_主转'), ('Generation_Torque', '扭矩模式_跟转'), ('Generation_Speed', '转速模式_跟转')], max_length=32)),
                ('rotate_direction', models.CharField(choices=[('Positive', '正转'), ('Negitive', '反转')], max_length=32)),
                ('speed_point', models.IntegerField()),
                ('temperature_limit', models.IntegerField()),
                ('env_temperature', models.FloatField()),
                ('cooling_type', models.CharField(choices=[('Liquid cooling', '冷却液'), ('Air Cooling', '风冷')], max_length=32)),
                ('cooling_flow', models.FloatField()),
                ('cooling_temperature', models.FloatField()),
                ('BEMF_before_1000rpm', models.FloatField()),
                ('temperature_before_BEMF', models.FloatField()),
                ('BEMF_after_1000rpm', models.FloatField()),
                ('temperature_after_BEMF', models.FloatField()),
                ('RTD1_stable', models.FloatField()),
                ('RTD2_stable', models.FloatField()),
                ('torque_command', models.FloatField()),
                ('torque_measured', models.FloatField()),
                ('dc_bus_voltage', models.FloatField()),
                ('dc_current', models.FloatField()),
                ('voltage_ph2n', models.FloatField()),
                ('f_voltage_ph2n', models.FloatField()),
                ('current_ph2n', models.FloatField()),
                ('f_current_ph2n', models.FloatField()),
                ('power', models.FloatField()),
                ('f_power', models.FloatField()),
                ('pf', models.FloatField()),
                ('f_pf', models.FloatField()),
                ('motor_efficiency', models.FloatField()),
                ('comment', models.CharField(blank=True, max_length=128, null=True)),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('modify_time', models.DateTimeField(auto_now=True)),
                ('motorinfo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_app.MotorInfo')),
            ],
            options={
                'verbose_name': '连续试验',
                'verbose_name_plural': '连续试验',
                'ordering': ['-c_time'],
            },
        ),
        migrations.CreateModel(
            name='Calibration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Stator_Resistance_EEPROM_x_10000', models.IntegerField()),
                ('Veh_Flux_EEPROM_web_x_1000', models.IntegerField()),
                ('Ld_Lq_Const_EEPROM_uH', models.IntegerField()),
                ('Kp_Current_EEPROM_x_1000', models.IntegerField()),
                ('Ki_Current_EEPROM_x_10000', models.IntegerField()),
                ('Gamma_Adjust_x_10', models.IntegerField()),
                ('comment', models.CharField(blank=True, max_length=128, null=True)),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('modify_time', models.DateTimeField(auto_now=True)),
                ('motorinfo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_app.MotorInfo')),
            ],
            options={
                'verbose_name': '校准',
                'verbose_name_plural': '校准',
                'ordering': ['-c_time'],
            },
        ),
        migrations.CreateModel(
            name='BEMF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_temperature', models.FloatField()),
                ('room_humidity', models.FloatField()),
                ('speed_point', models.IntegerField()),
                ('u_phase_voltage', models.FloatField()),
                ('v_phase_voltage', models.FloatField()),
                ('w_phase_voltage', models.FloatField()),
                ('Average_3phase_voltage', models.FloatField()),
                ('uv_phase_voltage', models.FloatField()),
                ('vw_phase_voltage', models.FloatField()),
                ('wu_phase_voltage', models.FloatField()),
                ('Average_3phase2phase_voltage', models.FloatField()),
                ('ke', models.FloatField()),
                ('comment', models.CharField(blank=True, max_length=128, null=True)),
                ('c_time', models.DateTimeField(auto_now_add=True)),
                ('modify_time', models.DateTimeField(auto_now=True)),
                ('motorinfo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_app.MotorInfo')),
            ],
            options={
                'verbose_name': '反电动势测量',
                'verbose_name_plural': '反电动势测量',
                'ordering': ['-c_time'],
            },
        ),
    ]
